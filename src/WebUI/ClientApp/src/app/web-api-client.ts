/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDockerClient {
    getInfo(): Observable<SystemInformationDto>;
    startContainer(command: StartContainerCommand): Observable<void>;
    getListContainers(all: boolean | undefined, limit: number | undefined, size: boolean | undefined, filters: string | null | undefined): Observable<ListContainersResponseDto[]>;
    createContainer(command: CreateContainerCommand): Observable<CreateContainerResponseDto>;
    createImage(command: CreateImageCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class DockerClient implements IDockerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getInfo(): Observable<SystemInformationDto> {
        let url_ = this.baseUrl + "/api/Docker/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInfo(<any>response_);
                } catch (e) {
                    return <Observable<SystemInformationDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SystemInformationDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetInfo(response: HttpResponseBase): Observable<SystemInformationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SystemInformationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SystemInformationDto>(<any>null);
    }

    startContainer(command: StartContainerCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Docker/containers/start";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartContainer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartContainer(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processStartContainer(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getListContainers(all: boolean | undefined, limit: number | undefined, size: boolean | undefined, filters: string | null | undefined): Observable<ListContainersResponseDto[]> {
        let url_ = this.baseUrl + "/api/Docker/containers/get?";
        if (all === null)
            throw new Error("The parameter 'all' cannot be null.");
        else if (all !== undefined)
            url_ += "All=" + encodeURIComponent("" + all) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (filters !== undefined && filters !== null)
            url_ += "Filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListContainers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListContainers(<any>response_);
                } catch (e) {
                    return <Observable<ListContainersResponseDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListContainersResponseDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListContainers(response: HttpResponseBase): Observable<ListContainersResponseDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListContainersResponseDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListContainersResponseDto[]>(<any>null);
    }

    createContainer(command: CreateContainerCommand): Observable<CreateContainerResponseDto> {
        let url_ = this.baseUrl + "/api/Docker/containers/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateContainer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateContainer(<any>response_);
                } catch (e) {
                    return <Observable<CreateContainerResponseDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateContainerResponseDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateContainer(response: HttpResponseBase): Observable<CreateContainerResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateContainerResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateContainerResponseDto>(<any>null);
    }

    createImage(command: CreateImageCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Docker/images/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateImage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateImage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateImage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class SystemInformationDto implements ISystemInformationDto {
    id?: string | undefined;
    containers?: number;
    containersRunning?: number;
    containersPaused?: number;
    containersStopped?: number;
    images?: number;
    kernelVersion?: string | undefined;
    operatingSystem?: string | undefined;
    osVersion?: string | undefined;
    osType?: string | undefined;
    architecture?: string | undefined;
    warnings?: string[] | undefined;

    constructor(data?: ISystemInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.containers = _data["containers"];
            this.containersRunning = _data["containersRunning"];
            this.containersPaused = _data["containersPaused"];
            this.containersStopped = _data["containersStopped"];
            this.images = _data["images"];
            this.kernelVersion = _data["kernelVersion"];
            this.operatingSystem = _data["operatingSystem"];
            this.osVersion = _data["osVersion"];
            this.osType = _data["osType"];
            this.architecture = _data["architecture"];
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [] as any;
                for (let item of _data["warnings"])
                    this.warnings!.push(item);
            }
        }
    }

    static fromJS(data: any): SystemInformationDto {
        data = typeof data === 'object' ? data : {};
        let result = new SystemInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["containers"] = this.containers;
        data["containersRunning"] = this.containersRunning;
        data["containersPaused"] = this.containersPaused;
        data["containersStopped"] = this.containersStopped;
        data["images"] = this.images;
        data["kernelVersion"] = this.kernelVersion;
        data["operatingSystem"] = this.operatingSystem;
        data["osVersion"] = this.osVersion;
        data["osType"] = this.osType;
        data["architecture"] = this.architecture;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data; 
    }
}

export interface ISystemInformationDto {
    id?: string | undefined;
    containers?: number;
    containersRunning?: number;
    containersPaused?: number;
    containersStopped?: number;
    images?: number;
    kernelVersion?: string | undefined;
    operatingSystem?: string | undefined;
    osVersion?: string | undefined;
    osType?: string | undefined;
    architecture?: string | undefined;
    warnings?: string[] | undefined;
}

export class StartContainerCommand implements IStartContainerCommand {
    id?: string | undefined;
    detachKeys?: string | undefined;

    constructor(data?: IStartContainerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.detachKeys = _data["detachKeys"];
        }
    }

    static fromJS(data: any): StartContainerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new StartContainerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["detachKeys"] = this.detachKeys;
        return data; 
    }
}

export interface IStartContainerCommand {
    id?: string | undefined;
    detachKeys?: string | undefined;
}

export class ListContainersResponseDto implements IListContainersResponseDto {
    id?: string | undefined;
    names?: string[] | undefined;
    image?: string | undefined;
    imageID?: string | undefined;
    command?: string | undefined;
    created?: string | undefined;
    state?: string | undefined;
    status?: string | undefined;

    constructor(data?: IListContainersResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names!.push(item);
            }
            this.image = _data["image"];
            this.imageID = _data["imageID"];
            this.command = _data["command"];
            this.created = _data["created"];
            this.state = _data["state"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ListContainersResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListContainersResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item);
        }
        data["image"] = this.image;
        data["imageID"] = this.imageID;
        data["command"] = this.command;
        data["created"] = this.created;
        data["state"] = this.state;
        data["status"] = this.status;
        return data; 
    }
}

export interface IListContainersResponseDto {
    id?: string | undefined;
    names?: string[] | undefined;
    image?: string | undefined;
    imageID?: string | undefined;
    command?: string | undefined;
    created?: string | undefined;
    state?: string | undefined;
    status?: string | undefined;
}

export class CreateContainerResponseDto implements ICreateContainerResponseDto {
    id?: string | undefined;
    warnings?: string[] | undefined;

    constructor(data?: ICreateContainerResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [] as any;
                for (let item of _data["warnings"])
                    this.warnings!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateContainerResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateContainerResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data; 
    }
}

export interface ICreateContainerResponseDto {
    id?: string | undefined;
    warnings?: string[] | undefined;
}

export class CreateContainerCommand implements ICreateContainerCommand {
    name?: string | undefined;
    image?: string | undefined;
    openStdin?: boolean;
    exposedPorts?: string[] | undefined;

    constructor(data?: ICreateContainerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.image = _data["image"];
            this.openStdin = _data["openStdin"];
            if (Array.isArray(_data["exposedPorts"])) {
                this.exposedPorts = [] as any;
                for (let item of _data["exposedPorts"])
                    this.exposedPorts!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateContainerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateContainerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["image"] = this.image;
        data["openStdin"] = this.openStdin;
        if (Array.isArray(this.exposedPorts)) {
            data["exposedPorts"] = [];
            for (let item of this.exposedPorts)
                data["exposedPorts"].push(item);
        }
        return data; 
    }
}

export interface ICreateContainerCommand {
    name?: string | undefined;
    image?: string | undefined;
    openStdin?: boolean;
    exposedPorts?: string[] | undefined;
}

export class CreateImageCommand implements ICreateImageCommand {
    fromImage?: string | undefined;

    constructor(data?: ICreateImageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fromImage = _data["fromImage"];
        }
    }

    static fromJS(data: any): CreateImageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateImageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fromImage"] = this.fromImage;
        return data; 
    }
}

export interface ICreateImageCommand {
    fromImage?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}